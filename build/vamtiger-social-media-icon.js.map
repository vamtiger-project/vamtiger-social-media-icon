{"version":3,"file":"vamtiger-social-media-icon.js","sources":["../source/types.ts","../source/css/document-index.ts","../source/html/index.ts","../source/get-template.ts","../source/config.ts","../source/set-fill-color.ts","../source/load-icon.ts","../source/element.ts","../source/vamtiger-social-media-icon.ts"],"sourcesContent":["import * as VamtigerBrowserSupport from 'vamtiger-browser-method/build/types';\nimport VamtigerSocialMediaIcon from './element';\n\nexport enum StringConstant {\n    nothing = '',\n    newline = '\\n'\n}\n\nexport enum Selector {\n    style = 'style',\n    slot = 'slot',\n    figure = 'figure',\n    figcaption = 'figcaption',\n    facebook = 'figure[data-facebook]',\n    twitter = 'figure[data-twitter]',\n    instagram = 'figure[data-instagram]',\n    iconPath = 'svg > path',\n    vamtigerResponsiveSvg = 'vamtiger-responsive-svg'\n}\n\nexport enum IconFigure {\n    twitter = 'twitter',\n    instagram = 'instagram',\n    facebook = 'facebook'\n}\n\nexport enum JsonLd {\n    twitter = 'https://unpkg.com/vamtiger-twitter-icon-json-ld@latest',\n    facebook = 'https://unpkg.com/vamtiger-facebook-icon-json-ld@latest',\n    instagram = 'https://unpkg.com/vamtiger-instagram-icon-json-ld@latest'\n}\n\nexport enum EventName {\n    iconLoaded = 'iconLoaded'\n}\n\nexport enum ObservedAttributes {\n\n}\n\nexport interface IGetTemplate {\n    selector: Selector;\n    attributes?: IAttributes;\n    properties?: IProperties;\n}\n\nexport interface IAttributes {\n    id?: string;\n    for?: string;\n    name?: string;\n    'data-json-ld'?: string;\n}\n\nexport interface IProperties {\n    innerHTML?: string;\n}\n\nexport interface IDataset extends DOMStringMap {\n    twitter?: IconFigure.twitter;\n    facebook?: IconFigure.facebook;\n    instagram?: IconFigure.instagram;\n    color?: string;\n    hoverColor?: string;\n    loaded?: string;\n}\n\nexport interface ILoadIcon {\n    element: VamtigerSocialMediaIcon;\n}\n\nexport interface ISetFillColor {\n    element: VamtigerSocialMediaIcon;\n}\n\nexport type AttributesKey = keyof IAttributes;\n\nexport type ObservedAttribute = keyof typeof ObservedAttributes;\n\nexport type GetTemplate<P extends IGetTemplate> =\n    P['selector'] extends Selector.style ? HTMLStyleElement :\n    P['selector'] extends Selector.slot ? HTMLSlotElement :\n    P['selector'] extends\n        Selector.figure\n        | Selector.figcaption\n        | Selector.facebook\n        | Selector.twitter\n        | Selector.instagram\n        | Selector.figcaption\n        | Selector.vamtigerResponsiveSvg\n            ? HTMLElement :\n    null;","export default `figcaption,figure,svg,vamtiger-social-media-icon{margin:0;padding:0}vamtiger-social-media-icon{opacity:0;-webkit-transition:opacity 275ms linear;transition:opacity 275ms linear}vamtiger-social-media-icon [slot=vamtiger-social-media-icon],vamtiger-social-media-icon [slot=vamtiger-social-media-icon] svg{width:100%;height:100%}vamtiger-social-media-icon [slot=vamtiger-social-media-icon][data-instagram] svg{-webkit-transform:scale(1.27) translateY(1px);transform:scale(1.27) translateY(1px)}vamtiger-social-media-icon [slot=vamtiger-social-media-icon] svg>path{-webkit-transition:fill 175ms linear;transition:fill 175ms linear}vamtiger-social-media-icon[data-loaded]{opacity:1}\n/*# sourceMappingURL=document-index.ts.map */`;","export default `<style data-dynamic-style> </style> <slot></slot> <figure></figure> <figcaption></figcaption> <vamtiger-responsive-svg></vamtiger-responsive-svg> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <title>vamtiger-social-media-icon</title> <link rel=\"stylesheet\" href=\"https://unpkg.com/mocha/mocha.css\"> <link rel=\"stylesheet\" href=\"test.css\"> <script src=\"https://unpkg.com/mocha/mocha.js\"></script> <script src=\"https://unpkg.com/chai/chai.js\"></script> <script src=\"https://unpkg.com/vamtiger-browser-support@0.31.1\" src-local=\"http://127.0.0.1:9999/build/vamtiger-browser-support.js\" data-es2015-support-primary data-element-query-support data-web-component-support data-fetch-support data-load=\"test/browser.js\" ></script> </head> <body> <section id=\"mocha\"> <header> <h1> vamtiger-social-media-icon </h1> </header> </section> <vamtiger-social-media-icon data-twitter></vamtiger-social-media-icon> <vamtiger-social-media-icon data-facebook></vamtiger-social-media-icon> <vamtiger-social-media-icon data-instagram></vamtiger-social-media-icon> <vamtiger-social-media-icon data-twitter data-color=\"red\"></vamtiger-social-media-icon> <vamtiger-social-media-icon data-facebook data-color=\"green\"></vamtiger-social-media-icon> <vamtiger-social-media-icon data-instagram data-color=\"blue\"></vamtiger-social-media-icon> </body> </html>`;","import {\n    IGetTemplate,\n    GetTemplate,\n    StringConstant,\n    AttributesKey\n} from './types';\nimport html from './html';\nimport css from './css';\n\nconst { nothing } = StringConstant;\nconst template = document.createElement('template');\nconst stylesheet = `<style>${css}</style>`\nconst templateHtml = [\n    stylesheet,\n    html\n].join(nothing);\n\ntemplate.innerHTML = templateHtml;\n\nexport default <P extends IGetTemplate>(params: P) => {\n    const {\n        selector,\n        attributes = {},\n        properties = {}\n    } = params;\n    const attributesKeys = Object.keys(attributes) as AttributesKey[]\n    const templateElement = template.content.querySelector(selector);\n    const currentTemplate = templateElement && templateElement.cloneNode(true) as GetTemplate<P>;\n\n    if (currentTemplate) {\n        Object.assign(currentTemplate, properties);\n\n        attributesKeys.forEach(key => attributes[key] && currentTemplate.setAttribute(key, attributes[key] || ''));\n    }\n\n    return currentTemplate;\n};","import {\n    ObservedAttributes,\n    ObservedAttribute\n} from './types'\n\nexport const shadowRoot = {\n    mode: 'open'\n} as ShadowRootInit;\n\nexport const observedAttributes = Object.keys(ObservedAttributes) as ObservedAttribute[];\n\nexport const dependencies = [\n    'https://unpkg.com/vamtiger-responsive-svg@latest'\n];","import {\n    ISetFillColor,\n    IDataset,\n    Selector\n} from './types';\n\nexport default function({ element }: ISetFillColor) {\n    const dataset = element.dataset as IDataset;\n    const {\n        color\n    } = dataset;\n    const iconPath = element.querySelector<SVGPathElement>(Selector.iconPath);\n\n    if (iconPath && color) {\n        iconPath.style.fill = color;\n    }\n}","import {\n    IDataset,\n    ILoadIcon,\n    Selector,\n    IconFigure,\n    JsonLd,\n    StringConstant,\n    EventName\n} from './types';\nimport getTemplate from './get-template';\nimport { name as slot } from './element';\nimport setFillColor from './set-fill-color';\n\nconst { VamtigerBrowserMethod } = window;\nconst { getData } = VamtigerBrowserMethod;\nconst { nothing } = StringConstant;\nconst eventParams = {\n    bubbles: true\n};\n\nexport default async function ({ element }: ILoadIcon) {\n    const dataset = element.dataset as IDataset;\n    const jsonLdUrl = dataset.hasOwnProperty(IconFigure.twitter) && JsonLd.twitter\n        || dataset.hasOwnProperty(IconFigure.facebook) && JsonLd.facebook\n        || dataset.hasOwnProperty(IconFigure.instagram) && JsonLd.instagram;\n    const vamtigerResponsiveSvg = jsonLdUrl && getTemplate({\n        selector: Selector.vamtigerResponsiveSvg,\n        attributes: {\n            'data-json-ld': jsonLdUrl\n        }\n    });\n    const inconLoadedEvent = new CustomEvent(\n        EventName.iconLoaded,\n        eventParams\n    );\n    const selector = dataset.hasOwnProperty(IconFigure.facebook) && Selector.facebook\n        || dataset.hasOwnProperty(IconFigure.twitter) && Selector.twitter\n        || dataset.hasOwnProperty(IconFigure.instagram) && Selector.instagram;\n    const icon = vamtigerResponsiveSvg\n        || selector && getTemplate({ selector });\n\n    if (icon) {\n        icon.slot = slot;\n\n        element.appendChild(icon);\n\n        if (vamtigerResponsiveSvg) {\n            vamtigerResponsiveSvg.addEventListener('svgLoaded', handleLoad);\n        } else {\n            setFillColor({ element });\n        }\n    }\n\n    function handleLoad(event: Event) {\n        (vamtigerResponsiveSvg as HTMLElement).removeEventListener('svgLoaded', handleLoad);\n        (vamtigerResponsiveSvg as HTMLElement).dispatchEvent(inconLoadedEvent);\n        setFillColor({ element });\n\n        dataset.loaded = nothing;\n    }\n}","import {\n    Selector,\n    ObservedAttribute\n} from './types';\nimport css from './css/document-index';\nimport getTemplate from './get-template';\nimport {\n    shadowRoot as shadowRootConfig,\n    observedAttributes\n} from './config';\nimport loadIcon from './load-icon';\n\nconst { VamtigerBrowserMethod } = window;\nconst { loadScript } = VamtigerBrowserMethod;\nexport const name = 'vamtiger-social-media-icon';\n\ncss && loadScript({ name, css })\n    .catch(console.error);\n\nexport default class VamtigerSocialMediaIcon extends HTMLElement {\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow(shadowRootConfig);\n        const stylesheet = getTemplate({\n            selector: Selector.style\n        });\n        const figureSlot = getTemplate({\n            selector: Selector.slot,\n            attributes: {\n                name\n            }\n        });\n        const elements = [\n            stylesheet,\n            figureSlot\n        ];\n\n        elements.forEach(element => element && shadowRoot.appendChild(element));\n    }\n\n    static get observedAttributes() {\n        return observedAttributes;\n    }\n\n    async connectedCallback() {\n        const element = this;\n\n        await loadIcon({ element });\n    }\n\n    attributeChangedCallback(name: ObservedAttribute, oldValue: string, newValue: string) {\n\n    }\n}","import constructor, { name } from './element';\nimport {\n    dependencies\n} from './config'\n\nconst { VamtigerBrowserMethod } = window;\nconst { defineCustomElement, loadScript } = VamtigerBrowserMethod;\nconst params = {\n    name,\n    constructor\n};\n\nasync function load() {\n    await Promise.all(dependencies.map(src => loadScript({ src })));\n\n    defineCustomElement(params);\n}\n\nload().catch(console.warn);"],"names":["StringConstant","Selector","IconFigure","JsonLd","EventName","ObservedAttributes","nothing","template","document","createElement","templateHtml","html","join","innerHTML","params","selector","attributes","properties","attributesKeys","Object","keys","templateElement","content","querySelector","currentTemplate","cloneNode","assign","forEach","key","setAttribute","shadowRoot","mode","observedAttributes","dependencies","element","dataset","color","iconPath","style","fill","eventParams","bubbles","VamtigerBrowserMethod","window","loadScript","name","css","catch","console","error","defineCustomElement","HTMLElement","[object Object]","super","this","attachShadow","shadowRootConfig","getTemplate","slot","appendChild","async","jsonLdUrl","hasOwnProperty","twitter","facebook","instagram","vamtigerResponsiveSvg","data-json-ld","inconLoadedEvent","CustomEvent","iconLoaded","icon","addEventListener","handleLoad","event","removeEventListener","dispatchEvent","setFillColor","loaded","loadIcon","oldValue","newValue","Promise","all","map","src","load","warn"],"mappings":"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"}